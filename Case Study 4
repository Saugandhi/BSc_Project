import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import PCA
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_absolute_error
from tensorflow.keras.optimizers import Adam

np.random.seed(42)
time_steps = 1000  # Total time steps
data = {
    'traffic_flow': np.sin(np.linspace(0, 50, time_steps)) + np.random.normal(scale=0.5, size=time_steps),
    'temperature': np.random.normal(loc=20, scale=5, size=time_steps),
    'precipitation': np.random.normal(loc=1, scale=0.5, size=time_steps)
}
df = pd.DataFrame(data)

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)

pca = PCA(n_components=2)  # Reducing to 2 principal components for simplicity
reduced_data = pca.fit_transform(scaled_data)

def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length])
        y.append(data[i + seq_length, 0])  # Target is traffic flow
    return np.array(X), np.array(y)

sequence_length = 10
X, y = create_sequences(reduced_data, sequence_length)

train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

model = Sequential([
    LSTM(64, input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=False),
    Dense(1)
])

model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')
model.summary()

model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.2, verbose=1)

y_pred = model.predict(X_test)
y_pred_inverse = scaler.inverse_transform(np.hstack([y_pred, np.zeros((y_pred.shape[0], 2))]))[:, 0]
y_test_inverse = scaler.inverse_transform(np.hstack([y_test.reshape(-1, 1), np.zeros((y_test.shape[0], 2))]))[:, 0]

mae = mean_absolute_error(y_test_inverse, y_pred_inverse)
print(f"Mean Absolute Error: {mae:.2f} vehicles per minute")
